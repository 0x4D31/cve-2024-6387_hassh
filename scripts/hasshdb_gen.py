#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
hasshdb_gen.py

Author: 0x4D31
Description: This script uses the Shodan API to compile a list of HASSH fingerprints
for OpenSSH versions vulnerable to CVE-2024-6387. It generates a fingerprint database
and saves the results in JSON and text formats. The text database can be used with the 
Nmap NSE script available at: https://github.com/0x4D31/hassh-utils.
"""

import sys
import json
from collections import defaultdict
from shodan import Shodan

# Add your Shodan API key here
API_KEY = ''  

HASSH_FACET = [
    ('ssh.hassh', 5),
]
HASSH_FACET_TITLE = {
    'ssh.hassh': 'Top 5 HASSH fingerprints',
}

vulnerable_versions = {
    '4.0': 'SSH-2.0-OpenSSH_4.0', '4.0p1': 'SSH-2.0-OpenSSH_4.0p1',
    '4.1': 'SSH-2.0-OpenSSH_4.1', '4.1p1': 'SSH-2.0-OpenSSH_4.1p1',
    '4.2': 'SSH-2.0-OpenSSH_4.2', '4.2p1': 'SSH-2.0-OpenSSH_4.2p1',
    '4.3': 'SSH-2.0-OpenSSH_4.3', '4.3p1': 'SSH-2.0-OpenSSH_4.3p1',
    '4.4': 'SSH-2.0-OpenSSH_4.4', '4.4p1': 'SSH-2.0-OpenSSH_4.4p1',
    '8.5': 'SSH-2.0-OpenSSH_8.5', '8.5p1': 'SSH-2.0-OpenSSH_8.5p1',
    '8.6': 'SSH-2.0-OpenSSH_8.6', '8.6p1': 'SSH-2.0-OpenSSH_8.6p1',
    '8.7': 'SSH-2.0-OpenSSH_8.7', '8.7p1': 'SSH-2.0-OpenSSH_8.7p1',
    '8.8': 'SSH-2.0-OpenSSH_8.8', '8.8p1': 'SSH-2.0-OpenSSH_8.8p1',
    '8.9': 'SSH-2.0-OpenSSH_8.9', '8.9p1': 'SSH-2.0-OpenSSH_8.9p1',
    '9.0': 'SSH-2.0-OpenSSH_9.0', '9.0p1': 'SSH-2.0-OpenSSH_9.0p1',
    '9.1': 'SSH-2.0-OpenSSH_9.1', '9.1p1': 'SSH-2.0-OpenSSH_9.1p1',
    '9.2': 'SSH-2.0-OpenSSH_9.2', '9.2p1': 'SSH-2.0-OpenSSH_9.2p1',
    '9.3': 'SSH-2.0-OpenSSH_9.3', '9.3p1': 'SSH-2.0-OpenSSH_9.3p1',
    '9.4': 'SSH-2.0-OpenSSH_9.4', '9.4p1': 'SSH-2.0-OpenSSH_9.4p1',
    '9.5': 'SSH-2.0-OpenSSH_9.5', '9.5p1': 'SSH-2.0-OpenSSH_9.5p1',
    '9.6': 'SSH-2.0-OpenSSH_9.6', '9.6p1': 'SSH-2.0-OpenSSH_9.6p1',
    '9.7': 'SSH-2.0-OpenSSH_9.7', '9.7p1': 'SSH-2.0-OpenSSH_9.7p1',
}

def generate_hasshdb(api_key, versions, facets, facet_titles):
    """
    Generate a HASSH database by querying Shodan for vulnerable OpenSSH versions.

    Parameters:
    - api_key: str, Shodan API key
    - versions: dict, vulnerable OpenSSH versions
    - facets: list, list of properties for summary information
    - facet_titles: dict, titles for the facets

    Returns:
    - dict, HASSH database mapping each HASSH fingerprint to its OpenSSH versions and counts
    """
    api = Shodan(api_key)
    hasshdb = defaultdict(lambda: defaultdict(int))

    for version, id_string in versions.items():
        query = f'product:"OpenSSH" version:"{version}"'
        try:
            result = api.count(query, facets=facets)

            print(f"\n[+] OpenSSH version: {version}, Total Results: {result['total']}")
            if result['total'] != 0:
                for facet in result['facets']:
                    print(f'  \-- {facet_titles[facet]}:')
                    for term in result['facets'][facet]:
                        if term['count'] >= 10:
                            print(f"\t{term['value']}: {term['count']}")
                            hasshdb[term['value']][id_string] += term['count']

        except Exception as query_exception:
            print(f"Error querying version {version}: {query_exception}")

    return {k: dict(v) for k, v in hasshdb.items()}

def save_results(hasshdb_dict, formatted_output, hassh_output_file, json_output_file):
    with open(hassh_output_file, 'w') as f:
        for line in formatted_output:
            f.write(line + '\n')

    with open(json_output_file, 'w') as f:
        json.dump(hasshdb_dict, f, indent=4)

if __name__ == "__main__":
    try:
        hasshdb_dict = generate_hasshdb(API_KEY, vulnerable_versions, HASSH_FACET, HASSH_FACET_TITLE)

        formatted_output = []
        for hassh, versions_dict in hasshdb_dict.items():
            total_count = sum(versions_dict.values())

            sorted_versions = sorted(versions_dict.items(), key=lambda item: item[1], reverse=True)

            formatted_versions = []
            for version, count in sorted_versions:
                percentage = (count / total_count) * 100
                formatted_versions.append(f"{version} ({percentage:.0f}%)")

            formatted_string = f"{hassh} {' || '.join(formatted_versions)}"
            formatted_output.append(formatted_string)

        save_results(hasshdb_dict, formatted_output, "hasshdb.txt", "hasshdb.json")

    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)
