#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
hassh_query.py

Author: 0x4D31
Description: This script reads a HASSH fingerprint database from a JSON file and
queries Shodan for version and counts of servers with vulnerable HASSH fingerprints.
"""

import sys
import json
from collections import defaultdict
from shodan import Shodan

# Add your Shodan API key here
API_KEY = ''  

VER_FACET = [
    ('version', 100),
]
VER_FACET_TITLE = {
    'version': 'Top 100 version strings',
}

def query_hassh_values(api_key, hasshdb_dict):
    """
    Query Shodan for each HASSH value in the HASSH database and perform a facet query on the versions.

    Parameters:
    - api_key: str, Shodan API key
    - hasshdb_dict: dict, HASSH database

    Returns:
    - dict, version information and counts of servers with vulnerable HASSH fingerprints
    """
    api = Shodan(api_key)
    results = {}
    total_count = 0

    for hassh in hasshdb_dict.keys():
        query = f'ssh.hassh:"{hassh}"'
        try:
            result = api.count(query, facets=VER_FACET)
            total_count += result['total']
            print(f"\n - Query: {query}, Total results: {result['total']}")
            
            versions = {}
            if 'facets' in result:
                for facet in result['facets']:
                    for term in result['facets'][facet]:
                        versions[term['value']] = term['count']
                        
            results[hassh] = {
                "count": result['total'],
                "versions": versions,
            }

        except Exception as e:
            print(f"Error querying HASSH {hassh}: {e}")
    
    print(f"\nNumber of potentially vulnerable servers: {total_count}")

    return results

def save_query_results(query_results, output_file):
    with open(output_file, 'w') as f:
        json.dump(query_results, f, indent=4)

if __name__ == "__main__":
    try:
        with open("hasshdb.json", 'r') as f:
            hasshdb_dict = json.load(f)

        query_results = query_hassh_values(API_KEY, hasshdb_dict)
        save_query_results(query_results, "potentially-vulnerable.json")

    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)
